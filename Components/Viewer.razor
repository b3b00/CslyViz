@using csly_cli_api
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IBlazorDialogService dialogService
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime
@inject ICslyContext cslyContext;
@inject ICslyProcessor processor;


<div>
    
    <div>

        <h1>@cslyContext.SampleName</h1>
  
        <button id="submitButton" @onclick="Render" class="btn btn-primary bi-play-btn" disabled="@ActionDisabled"></button>

        <button id="clean" @onclick="CleanViz" class="btn btn-primary bi-trash"></button>
    </div>

    <div id="graph">
        <div id="output">
            <div id="error">
                @foreach (var message in messages)
                {
                    <p style="color:black; background-color: lawngreen ">@message</p>
                }
    
                @foreach (var error in errors)
                {
                    <p style="color:black; background-color: darksalmon ">@error</p>
                }
            </div>
        </div>
    </div>
    @if (processing)
    {
        <h4>processing...</h4>
        <img src="image/spinner.svg" width="50px"/>
    } else if (!string.IsNullOrEmpty(dot)){
        <div>
            
            @if (ShowCode)
            {
            <button id="hidethiscode" @onclick="ToggleCode" class="btn btn-primary bi-eye-slash-fill">Hide this code!</button>
                <pre>@cslyContext.Source</pre>
            }
            else
            {
            <button id="showmethecode" @onclick="ToggleCode" class="btn btn-primary bi-eye-fill">Show me the code!</button>
            }
        </div>
        <ul>
            @if (Timings != null && Timings.Any())
            {
                @foreach (var time in Timings)
                {
                    <li>@time.Key : @time.Value ms</li>
                }
            }
        </ul>
        <GraphViz DotGraphViz="@dot" Id="bololo"></GraphViz>
    }
    
</div>

@code {

    [Parameter] public string? Title { get; set; }

    private bool ShowCode { get; set; } = false;

    private bool isComputing { get; set; } = false;
    
    private IDictionary<string,long> Timings { get; set; }

    private bool ActionDisabled => string.IsNullOrEmpty(cslyContext.Grammar) || string.IsNullOrEmpty(cslyContext.Source);

    private string dot;

    private bool processing = false;

    protected override async void OnInitialized()
    {
    }


    private async void ToggleCode()
    {
        ShowCode = !ShowCode;
    }

    private async void Render()
    {
;       errors.Clear();
        messages.Clear();
        Console.WriteLine("processing...");
        await Task.Delay(1);
        
        processing = true;
        StateHasChanged();
        Task.Run(() =>
        {
            var dotresult = processor.GetDot(cslyContext.Grammar, cslyContext.Source);
            processing = false;
            StateHasChanged();
            if (dotresult.IsOK)
            {
                messages.Add("Parse OK");
                dot = dotresult.Result;
                Timings = dotresult.Timings;
                StateHasChanged();
            }
            else
            {
                errors.AddRange(dotresult.Errors);
                StateHasChanged();            
            }
        });

        
        Console.WriteLine("processed.");
        StateHasChanged();
        
    }
    
   
    public async Task VizRender(string graph)
    {
        await JSRuntime.InvokeAsync<string>("vizRender", graph);
    }
    
    public async Task CleanViz()
    {
        Timings = null;
        messages.Clear();
        errors.Clear();
        StateHasChanged();
        dot = null;
    }


    private List<string> messages = new List<string>();
    private List<string> errors = new List<string>();
    
    public async Task AppendError(string errorMessage)
    {
        errors.Add(errorMessage);
        StateHasChanged();
    }
    
    public async Task AppendMessage(string message)
    {
        messages.Add(message);
        StateHasChanged();
    }



}
