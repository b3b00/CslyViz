@using System.Xml
@using csly.cli.model.lexer
@using csly.cli.model.parser
@using sly.lexer
<h3>LexerAssistant</h3>

@code {
    private const string YYYYMMDD = "YYYYMMDD";
    private const string DDMMYYYY = "DDMMYYYY";

    private string TokenName { get; set; } = "";
    
    private bool HideBasic { get; set; } = true;
    
    private Func<Task> BasicCallback { get; set; } = null;
    
    private string TokenType { get; set; } = "";
    
    private Dictionary<string, (Action<bool> setter, Func<bool> getter)> TokenActions { get; set; } 
    
    
    
    private async Task ShowBasic(string tokenType, Func<Task> callback)
    {
        Console.WriteLine($"toggling token >{tokenType}<");
        HideBasic = !HideBasic;
        TokenType = tokenType;
        BasicCallback = callback;
        TokenName = "";
        StateHasChanged();
    }
    
    private async Task Basic()
    {
        HideBasic = true;
        StateHasChanged();
        if (BasicCallback != null)
        {
            await BasicCallback();
        }
    }
    
    [Parameter] public EventCallback<string> OnTokenAdded { get; set; }

    private bool HideCustomId { get; set; } = true;
    
    private async Task CustomId((string name, string start, string end) args)
    {
        var token = new TokenModel(new List<AttributeModel>(),GenericToken.Identifier,args.name,IdentifierType.Custom,args.start,args.end);
        await InsertToken(token);
        HideCustomId = true;
        StateHasChanged();
    }
    

    
    private bool HideString { get; set; } = true;
    private async Task String((string name, string delimiter, string escape) args)
    {
        
        HideString = true;
        var token = new TokenModel(new List<AttributeModel>(),GenericToken.String,args.name,args.delimiter,args.escape);
        InsertToken(token);
        StateHasChanged();
    }

    
    
    private bool HideChar { get; set; } = true;
    private async Task Character((string name, string delimiter, string escape) args)
    {
        
        HideChar = true;
        var token = new TokenModel(new List<AttributeModel>(),GenericToken.Char,args.name,args.delimiter,args.escape);
        InsertToken(token);
        StateHasChanged();
    }
    
    private bool HideSingleComment { get; set; } = true;
    private async Task SingleComment((string name, string start) args)
    {
        
        HideSingleComment = true;
        var token = new TokenModel(new List<AttributeModel>(),GenericToken.Comment,args.name,args.start);
        InsertToken(token);
        StateHasChanged();
    }
    
    private bool HideMultiComment { get; set; } = true;
    
    private async Task MultiComment((string name, string start, string end) args)
    {
        HideMultiComment = true;
        var token = new TokenModel(new List<AttributeModel>(),GenericToken.Comment,args.name,args.start, args.end);
        InsertToken(token);
        StateHasChanged();
    }

    private bool HideDouble = true;
    private async Task Double((string name, string separator) args)
    {
        HideDouble = true;
        var token = new TokenModel(new List<AttributeModel>(),GenericToken.Double,args.name,args.separator);
        InsertToken(token);
        StateHasChanged();
    }
    

    private string DateFormat { get; set; } = "YYYYMMDD";
    
    private string DateSeparator { get; set; } = "-";
    
    private bool HideDate { get; set; } = true;
    private async Task Date()
    {
        HideDate = true;
        InsertToken(new TokenModel(new List<AttributeModel>(),GenericToken.Date,TokenName,IdentifierType.Alpha,DateFormat, DateSeparator));
    }

    
    private bool HideKeyWord = true;
    private async Task KeyWord((string name, string value) args)
    {
        HideKeyWord = true;
        var token = new TokenModel(new List<AttributeModel>(),GenericToken.KeyWord,args.name,args.value);
        InsertToken(token);
        StateHasChanged();
    }
    
    private bool HideSugar = true;
    private async Task Sugar((string name, string pattern) args)
    {
        HideSugar = true;
        var token = new TokenModel(new List<AttributeModel>(),GenericToken.SugarToken,args.name,args.pattern);
        InsertToken(token);
        StateHasChanged();
    }
    
    private bool HideHexa = true;
    private async Task Hexa((string name, string pattern) args)
    {
        HideHexa = true;
        var token = new TokenModel(new List<AttributeModel>(),GenericToken.Hexa,args.name,args.pattern);
        InsertToken(token);
        StateHasChanged();
    }
    
    private bool HideAlphaId { get; set; } = true;
    private async Task AlphaId(string name)
    {
        InsertToken(new TokenModel(new List<AttributeModel>(),GenericToken.Identifier,name,IdentifierType.Alpha));
    }
    
    private bool HideAlphaNumId { get; set; } = true;
    private async Task AlphaNumId(string name)
    {
        InsertToken(new TokenModel(new List<AttributeModel>(),GenericToken.Identifier,name,IdentifierType.AlphaNumeric));
    }
    
    private bool HideAlphaNumDashId { get; set; } = true;
    private async Task AlphaNumDashId(string name)
    {
        InsertToken(new TokenModel(new List<AttributeModel>(),GenericToken.Identifier,name,IdentifierType.AlphaNumericDash));
    }
    
    private bool HideInt { get; set; } = true;
    private async Task Int(string name)
    {
        InsertToken(new TokenModel(new List<AttributeModel>(),GenericToken.Int,name));
    }
    
    private bool HideExtension { get; set; } = true;
    private async Task Extension(string name)
    {
        InsertToken(new TokenModel(new List<AttributeModel>(),GenericToken.Extension,name));
    }
    private async Task InsertToken(TokenModel token)
    {        
        Console.WriteLine($"insert token >>{token.ToCliSource()}<<");
        if (OnTokenAdded.HasDelegate)
        {
            TokenType = "";
            await OnTokenAdded.InvokeAsync(token.ToCliSource());
        }
    }

    private async Task CancelSelection()
    {
        TokenActions[TokenSelection].setter(true);
        TokenSelection = " ";
        
    }

    protected override async void OnInitialized()
    {
        TokenActions= new Dictionary<string,( Action<bool> setter, Func<bool> getter)>()
        {
            {"AlphaId", ((b) => _ = HideAlphaId = b, () => HideAlphaId)},
            {"AlphaNumId", ((b) => _ =HideAlphaNumId = b, () => HideAlphaNumId)},
            {"AlphaNumDashId", ((b) => _ = HideAlphaNumDashId = b, () => HideAlphaNumDashId)},
            {"Int", ((b) => _ = HideInt = b, () => HideInt)},
            {"Extension", ((b) => _ = HideExtension = b, ()=> HideExtension)},
            {"CustomId", ((b) => HideCustomId = b, () => HideCustomId)},
            {"String",((b) => HideString = b, () => HideString)},
            {"Char", ((b) => HideChar = b, () => HideChar)},
            {"SingleComment", ((b) => HideSingleComment = b, () => HideSingleComment)},
            {"MultiComment", ((b) => HideMultiComment = b, () => HideMultiComment)},
            {"Double", ((b) => HideDouble = b, () => HideDouble)},
            {"Date", ((b) => HideDate = b, () => HideDate)},
            {"Keyword", ((b) => HideKeyWord = b, () => HideKeyWord)},
            {"Sugar", ((b) => HideSugar = b, () => HideSugar)},
            {"Hexa", ((b) => HideHexa = b, () => HideHexa)},
        };
    }

    
    private string TokenSelection { get; set; } = " ";
    private void OnTokenSelectionChange()
    {
        if (!string.IsNullOrWhiteSpace(TokenSelection))
        {
            foreach (var tokenAction in TokenActions.Where(x => x.Key != TokenSelection && !string.IsNullOrWhiteSpace((x.Key))))
            {
                tokenAction.Value.setter(true);
            }
            TokenActions[TokenSelection].setter(false);
        }
        else
        {
            foreach (var tokenAction in TokenActions.Where(x =>  !string.IsNullOrWhiteSpace((x.Key))))
            {
                tokenAction.Value.setter(true);
            }
        }
    }
}

<div style="flex-direction: row; display: flex" id="lexerAssistance">
    <select @bind="TokenSelection" @bind:after="OnTokenSelectionChange" id="tokenType" class="form-select">
        <Option value=" "> </Option>
        @foreach (var t in TokenActions)
        {
            <option value="@t.Key">@t.Key</option> 
        }
    </select>
</div>

<ZeroParameterToken Label="AlphaId" Hide="HideAlphaId" OnTokenAdded="AlphaId" OnCancel="CancelSelection"></ZeroParameterToken>

<ZeroParameterToken Label="AlphaNumId" Hide="HideAlphaNumId" OnTokenAdded="AlphaNumId" OnCancel="CancelSelection"></ZeroParameterToken>

<ZeroParameterToken Label="AlphaNumDashId" Hide="HideAlphaNumDashId" OnTokenAdded="AlphaNumDashId" OnCancel="CancelSelection"></ZeroParameterToken>

<ZeroParameterToken Label="Int" Hide="HideInt" OnTokenAdded="Int" OnCancel="CancelSelection"></ZeroParameterToken>

<ZeroParameterToken Label="Extension" Hide="HideExtension" OnTokenAdded="Extension" OnCancel="CancelSelection"></ZeroParameterToken>

<TwoParameterToken Label="Custom Id" p1Label="start pattern" p2Label="end pattern" Hide="HideCustomId" OnTokenAdded="CustomId" OnCancel="CancelSelection"></TwoParameterToken>

<TwoParameterToken Label="String" p1Label="delimiter" p2Label="escape char" Hide="HideString" OnTokenAdded="String" OnCancel="CancelSelection"></TwoParameterToken>

<TwoParameterToken Label="Multi line comment" p1Label="start" p2Label="end" p1Value="/*" p2Value="*/" Hide="HideMultiComment" OnTokenAdded="MultiComment" OnCancel="CancelSelection"></TwoParameterToken>


<OneParameterToken Label="Single Line comment" p1Label="start" p1Value="//" Hide="HideSingleComment" OnTokenAdded="SingleComment" OnCancel="CancelSelection"></OneParameterToken>


<TwoParameterToken Label="Character" p1Label="delimiter" p2Label="escape char" Hide="HideChar" OnTokenAdded="Character" OnCancel="CancelSelection"></TwoParameterToken>

<OneParameterToken Label="Double" p1Label="decimal separator" p1Value="." Hide="HideDouble" OnTokenAdded="Double" OnCancel="CancelSelection"></OneParameterToken>

<OneParameterToken Label="Keyword" p1Label="value" Hide="HideKeyWord" OnTokenAdded="KeyWord" OnCancel="CancelSelection"></OneParameterToken>

<OneParameterToken Label="Sugar" Hide="HideSugar" p1Label="pattern" OnTokenAdded="Sugar" OnCancel="CancelSelection"></OneParameterToken>

<OneParameterToken Label="Sugar" Hide="HideHexa" p1Label="pattern" OnTokenAdded="Hexa" OnCancel="CancelSelection"></OneParameterToken>

<div hidden="@HideDate">
    <DialogHeader ShowClose="false">
        <h4>Date</h4>
    </DialogHeader>
    <DialogBody>
        <label for="customName" class="input-label">name</label>
        <input id="customName" @bind="@TokenName"/>
        <br/>
        <label for="format" class="input-label">format</label>

        <select id="format" @bind="DateFormat">
            <option value="YYYYMMDD">YYYYMMDD</option>
            <option value="DDMMYYYY">DDMMYYYY</option>
        </select>
        <br/>
        <label for="end" class="input-label">separator</label>
        <input id="end" @bind="@DateSeparator"/>
        <br/>
    </DialogBody>
    <DialogFooter>
        <button type="button" class="btn btn-primary" @onclick="@Date">Ok</button>
        <button type="button" class="btn btn-secondary" @onclick="() => { HideDate = true; CancelSelection();}">Cancel</button>
    </DialogFooter>
</div>