@using System.IO.Compression
@using System.Text
@using csly_cli_api
@using SharpFileSystem.FileSystems
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IBlazorDialogService dialogService
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime
@inject ICslyContext cslyContext;
@inject ICslyProcessor processor;

<div>
    <div>

        <h1>@cslyContext.SampleName</h1>
        <h3>@cslyContext.SampleDescription</h3>
        
        <div style="display: block">
            <label for="inputFile" class="input-label">Importer un fichier source</label>
            <InputFile id="inputFile" OnChange="LoadSource" class="btn btn-primary"/>
        </div>

        <button id="submitButton" @onclick="Compile" class="btn btn-primary" disabled="@ActionDisabled">
            Compile
        </button>
        <button id="submitButton" @onclick="GetJson" class="btn btn-primary" disabled="@ActionDisabled">
            Download JSON...
        </button>
        <button id="cleanButton" @onclick="CleanOutput" class="btn btn-primary">
            Clean
        </button>


        <div id="graph">
            <div id="output">
                <div id="error">
                    @foreach (var message in messages)
                    {
                    <p style="color:black; background-color: lawngreen ">@message</p>
                    }

                    @foreach (var error in errors)
                    {
                    <p style="color:black; background-color: darksalmon ">@error</p>
                    }

                </div>
            </div>
        </div>
        <ul>
            @if (Timings != null && Timings.Any())
            {
            @foreach (var time in Timings)
            {
            <li>@time.Key : @time.Value ms</li>
            }
            }
        </ul>
        
        <div class="input"> <!--style="display: flex; flex-direction: row">-->

            <div style="flex-direction: row; display: flex">
                <textarea cols="4" @bind="Lines"></textarea>
                <textarea style="overflow: hidden; width: 100%; height: 1301px;" i d="inputBox" maxlength="2000" spellcheck="false" @bind="Source" @onkeyup="() => SetLines(Source)" />
            </div>

        </div>
      
  
    </div>

    


</div>

@code {

    [Parameter] public string? Title { get; set; }
    
    private IDictionary<string,long> Timings { get; set; }

    private bool ActionDisabled => string.IsNullOrEmpty(cslyContext.Grammar) || string.IsNullOrEmpty(cslyContext.Source);

    private string dot;

    private string? Lines { get; set; }
    
    private string Source
    {
        get => cslyContext.Source ?? "";
        set
        {
            cslyContext.Source = value;
            SetLines(value);
            CleanOutput();
        }
    }
    
    protected override async void OnInitialized()
    {
    }


    private void SetLines(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            using (var reader = new StringReader(value))
            {
                var builder = new StringBuilder();
                string line = reader.ReadLine();
                int i = 0;
                while (line != null)
                {
                    builder.AppendLine(i.ToString());
                    line = reader.ReadLine();
                    i++;
                }

                Lines = builder.ToString();
                return;
            }
        }

        Lines = "0";
    }
   

    private async Task LoadSource(InputFileChangeEventArgs e)
    {
        var content =
            await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
        cslyContext.Source = content;
        StateHasChanged();
    }


    private async void GetJson()
    {
        var json = processor.GetJson(cslyContext.Grammar, cslyContext.Source);
        if (json.IsOK)
        {
            string fileName = "source.json";
            string contentType = "text/json";

            // Check if the IJSRuntime is the WebAssembly implementation of the JSRuntime
            if (JSUnmarshalledRuntime is IJSUnmarshalledRuntime webAssemblyJSRuntime)
            {
                webAssemblyJSRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", fileName, contentType, UTF8Encoding.UTF8.GetBytes(json.Result));
                return;
            }

            // Fall back to the slow method if not in WebAssembly
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, contentType, UTF8Encoding.UTF8.GetBytes(json.Result));
        }
        else
        {
            errors.Clear();
            errors.AddRange(json.Errors);
        }
    }



    private async void Compile()
    {
;       errors.Clear();
        messages.Clear();
        try
        {
            var dotresult = processor.GetDot(cslyContext.Grammar, cslyContext.Source);
            if (dotresult.IsOK)
            {
                Timings = dotresult.Timings;
                messages.Add("parse OK");
                StateHasChanged();
            }
            else
            {
                errors.AddRange(dotresult.Errors);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            errors.Add(e.InnerException?.Message ?? e.Message);
        }
    }
    
   


    private List<string> messages = new List<string>();
    private List<string> errors = new List<string>();
    
  
    private void CleanOutput()
    {
        errors?.Clear();
        messages?.Clear();
        Timings?.Clear();
        StateHasChanged();
    }
}
