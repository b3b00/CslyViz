
@using System.IO.Compression
@using System.Text
@using csly_cli_api
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IBlazorDialogService dialogService
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime
@inject ICslyContext cslyContext;
@inject ICslyProcessor processor;
@inject NavigationManager navigationManager
@inject ClipboardService clipboardService

<div>
    
    <div>
        
        <h1>@cslyContext.SampleName</h1>
        <h3>@cslyContext.SampleDescription</h3>

        <div style="display: block">
            <label for="preset">grammars : </label>
            <select class="form-control d-flex" @onchange="SelectSample" id="preset">
                @foreach (var template in cslyContext.GetSamples())
                {
                    <option value=@template.name>@(!string.IsNullOrEmpty(template.name) ? $"{template.name} - {template.description}" : "")</option>
                }
            </select>
        </div>


        <div style="display: block">
            <label for="grammarFile" class="input-label">Importer un fichier grammaire</label>
            <InputFile id="grammarFile" OnChange="LoadGrammar" class="btn btn-primary" />
        </div>

        <button id="submitButton" @onclick="Compile" class="btn btn-primary" disabled="@ActionDisabled">
            Compile
        </button>
        <button id="submitButton" @onclick="() => { HideGenerate = false; HideExtract = true; }" class="btn btn-primary" disabled="@ActionDisabled">
            Generate...
        </button>
        <button id="extractButton" @onclick="() => { HideExtract = false; HideGenerate = true; }" class="btn btn-primary">
            Extract grammar...
        </button>
        <button id="cleanButton" @onclick="CleanOutput" class="btn btn-primary bi-trash">
            Clean
        </button>
        <button id="shareButton" @onclick="Share" class="btn btn-primary bi-share">
            Share
        </button>
        

        <div id="graph">
            <div id="output">
                <div id="error">
                    @foreach (var message in messages)
                    {
                    <p style="color:black; background-color: lawngreen ">@message</p>
                    }

                    @foreach (var error in errors)
                    {
                    <p style="color:black; background-color: darksalmon ">@error</p>
                    }

                </div>
            </div>
        </div>

        <ul>
            @if (Timings != null && Timings.Any())
            {
            @foreach (var time in Timings)
            {
            <li>@time.Key : @time.Value ms</li>
            }
            }
        </ul>
        
    
       

        <div id="generate" hidden="@HideGenerate">
            <DialogHeader ShowClose="false">
                <h4>Source generation options</h4>
            </DialogHeader>
            <DialogBody>
                <label for="ns">NameSpace</label>
                <input id="ns" type="text" @bind="nameSpace"/>
                <br/>
                <label for="type">Parser output type</label>
                <input type="text" id="type" @bind="outputType"/>
            </DialogBody>
            <DialogFooter>
                <button type="button" class="btn btn-primary" @onclick="() => { HideGenerate = true; Generate(); }">Ok</button>
                <button type="button" class="btn btn-secondary" @onclick="() => { HideGenerate = true; }">Cancel</button>
            </DialogFooter>
        </div>

        <div hidden="@HideExtract">
            <DialogHeader ShowClose="false">
                <h4>Grammar extraction</h4>
            </DialogHeader>
            <DialogBody>

                <label for="lexerFile" class="input-label">Lexer</label>
                <InputFile id="lexerFile" OnChange="LoadLexer"/>
                <br/>
                <label for="parserFile" class="input-label">Parser</label>
                <InputFile id="parserFile" OnChange="LoadParser"/>


            </DialogBody>
            <DialogFooter>
                <button type="button" class="btn btn-primary" @onclick="() => { HideExtract = true; ExtractGrammar(); }">Ok</button>
                <button type="button" class="btn btn-secondary" @onclick="() => { HideExtract = true; }">Cancel</button>
            </DialogFooter>

        </div>

        <div class="input" style="display: flex;flex-direction: column">
            <LexerAssistant OnTokenAdded="@InsertToken"></LexerAssistant>
            <div style="flex-direction: row; display: flex">
                <textarea cols="4" @bind="Lines"></textarea>
                <textarea style="overflow: hidden; width: 100%; height: 1301px;" i d="inputBox" maxlength="2000" spellcheck="false" @bind="Grammar" @onkeyup="() => SetLines(Grammar)" />
            </div>

        </div>

       

    </div>


   
</div>

@code {
    
    private const string csly_share_mark = "CSLY-MARK#";

    private const string csly_share_delimiter = "$#$";

    [Parameter] public string? Title { get; set; }

    private string nameSpace;

    private string outputType;

    private bool HideGenerate = true;


    private string lexerSource = "";

    private string parserSource = "";
    
    private bool HideExtract = true;

    private bool ActionDisabled => string.IsNullOrEmpty(cslyContext.Grammar);
    
    private IDictionary<string,long> Timings { get; set; }
    

    private string Grammar
    {
        get => cslyContext.Grammar ?? "";
        set
        {
            cslyContext.Grammar = value;
            SetLines(value);
            CleanOutput();
        }
    }
    
    private string Lines { get; set; }
    
    protected override async void OnInitialized()
    {
        Console.WriteLine(navigationManager.Uri);
        Uri uri = new Uri(navigationManager.Uri);
        Console.WriteLine(uri.Fragment);
        
        int length = 0;
        if (uri.Fragment != null && uri.Fragment.Length > 1 && uri.Fragment[0] == '#')
        {
            try
            {
                var encodedData = uri.Fragment.Substring(1); 
                byte[] data = Convert.FromBase64String(encodedData);
                string content = System.Text.Encoding.UTF8.GetString(data);
                if (!string.IsNullOrEmpty(content) && content.StartsWith(csly_share_mark))
                {
                    content = content.Substring(csly_share_mark.Length);
                    var items = content.Split(csly_share_delimiter);
                    if (items.Length == 1)
                    {
                        Grammar = content;
                    }

                    if (items.Length == 2)
                    {
                        Grammar = items[0];
                        cslyContext.Source = items[1];
                    }
                }
            }
            catch (Exception e)
            {
                Console.Error.WriteLine("share content is not base64 encoded");
            }
        }
    }
    
    protected async Task Share()
    {
        string content = $"{csly_share_mark}{cslyContext.Grammar}{csly_share_delimiter}{cslyContext.Source}";
        Console.WriteLine($"share url is {content}");
        var bytes = Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(bytes);
        var current = navigationManager.Uri;
        var currentUri = new Uri(current);
        if (string.IsNullOrEmpty(currentUri.Fragment))
        {
            var share = $"{navigationManager.Uri}#{base64}";
            Console.WriteLine($"share url is : {share}");
            await clipboardService.WriteTextAsync(share);
        }
    }

    

    private async Task LoadGrammar(InputFileChangeEventArgs e)
    {
        var content =
            await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
        cslyContext.Grammar = content;
        StateHasChanged();
    }


    private void SetLines(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            using (var reader = new StringReader(value))
            {
                var builder = new StringBuilder();
                string line = reader.ReadLine();
                int i = 0;
                while (line != null)
                {
                    builder.AppendLine(i.ToString());
                    line = reader.ReadLine();
                    i++;
                }

                Lines = builder.ToString();
                return;
            }
        }

        Lines = "0";
    }


   


    private async void ExtractGrammar()
    {
            var extractedGrammar = processor.ExtractGrammar(parserSource, lexerSource);
            if (extractedGrammar.IsOK && !string.IsNullOrEmpty(extractedGrammar.Result))
            {
                cslyContext.Grammar = extractedGrammar.Result;
                StateHasChanged();
            }
            else
            {
                errors.AddRange(extractedGrammar.Errors);
            }
        
    }

    private async void Generate()
    {
            Console.WriteLine($"Generate => ns:{nameSpace}, type:{outputType}");
            var sources = processor.GenerateParser(cslyContext.Grammar, nameSpace, outputType);
            if (sources.IsOK)
            {
                byte[] compressedBytes;
                using (var outStream = new MemoryStream())
                {
                    using (var archive = new ZipArchive(outStream, ZipArchiveMode.Create, true))
                    {
                        var fileInArchive = archive.CreateEntry(sources.Result.ParserName + ".cs", CompressionLevel.Fastest);
                        using (var entryStream = fileInArchive.Open())
                        {
                            using (var fileToCompressStream = new MemoryStream(Encoding.UTF8.GetBytes(sources.Result.Parser)))
                            {
                                fileToCompressStream.CopyTo(entryStream);
                            }
                        }

                        fileInArchive = archive.CreateEntry(sources.Result.LexerName + ".cs", CompressionLevel.Fastest);
                        using (var entryStream = fileInArchive.Open())
                        {
                            using (var fileToCompressStream = new MemoryStream(Encoding.UTF8.GetBytes(sources.Result.Lexer)))
                            {
                                fileToCompressStream.CopyTo(entryStream);
                            }
                        }

                        fileInArchive = archive.CreateEntry(sources.Result.ParserName + ".csproj", CompressionLevel.Fastest);
                        using (var entryStream = fileInArchive.Open())
                        {
                            using (var fileToCompressStream = new MemoryStream(Encoding.UTF8.GetBytes(sources.Result.Project)))
                            {
                                fileToCompressStream.CopyTo(entryStream);
                            }
                        }
                    }

                    compressedBytes = outStream.ToArray();
                }


                string fileName = "parser.zip";
                string contentType = "application/zip";

                // Check if the IJSRuntime is the WebAssembly implementation of the JSRuntime
                if (JSUnmarshalledRuntime is IJSUnmarshalledRuntime webAssemblyJSRuntime)
                {
                    webAssemblyJSRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", fileName, contentType, compressedBytes);
                    return;
                }

                // Fall back to the slow method if not in WebAssembly
                await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, contentType, compressedBytes);
            }
            else
            {
                errors.Clear();
                errors.AddRange(sources.Errors);
            }
    }

  
    
    private async void Compile()
    {
        messages.Clear();
        errors.Clear();
        var compileResult = processor.Compile(cslyContext.Grammar);
        if (compileResult.IsOK)
        {
            messages.Clear();
            Timings = compileResult.Timings;
            messages.Add("Model is OK");
        }
        else
        {
            errors.Clear();
            errors.AddRange(compileResult.Errors);
        }
        StateHasChanged();
    }


    private List<string> messages = new List<string>();
    private List<string> errors = new List<string>();
    
    

    public async void SelectSample(ChangeEventArgs e)
    {
        errors.Clear();
        messages.Clear();
        string sampleName = e.Value?.ToString() ?? "";
        cslyContext.SetSample(sampleName);
        StateHasChanged();
    }

    private void CleanOutput()
    {
        errors.Clear();
        messages.Clear();
        if (Timings != null)
        {
            Timings.Clear();
        }

        StateHasChanged();
    }

    
    private async Task LoadParser(InputFileChangeEventArgs e)
    {
        
        var content = 
            await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
        parserSource = content;
    }
    
    private async Task LoadLexer(InputFileChangeEventArgs e)
    {
        
        var content = 
            await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
        lexerSource = content;
    }

    private async Task InsertToken(string token)
    {
        cslyContext.Grammar += "\n\n" + token;
        // TODO
    }
    
}
