
genericLexer MinimalXmlLexer;

[Mode]
[Push("tag")]
[Sugar] OPEN : "<";

[UpTo] CONTENT : "<"; 

[Mode]
[Push("pi")]
[Sugar] OPEN_PI : "<?";

[Mode]
[MultiLineComment] COMMENT : "<!--" "-->";

[Mode("tag")]
[Mode("pi")]
[AlphaId] ID;

[Mode("tag")]
[Sugar] SLASH : "/";

[Mode("tag", "pi")]
[Sugar] EQUALS : "=";

[Mode("tag", "pi")]
[Mode("pi")]
[String] VALUE;

[Mode("pi")]
[Pop]
[Sugar] CLOSE_PI : "?>";

[Mode("tag")]
[Pop]
[Sugar] CLOSE : ">";



parser MinimalXmlParser;

-> document : misc* element misc*;

@node(selfClosingTag);
element : OPEN[d] ID attributes SLASH[d] CLOSE[d];

opentag : OPEN[d] ID attributes CLOSE[d];

closetag : OPEN[d] SLASH[d] ID CLOSE[d];

@subNodes(null, elements, null);
@node(tag);
element : opentag [element|processing-instruction|comment|content]* closetag;
misc : [comment | processing-instruction | content];
comment : COMMENT;

@node(processing);
processing-instruction : OPEN_PI[d] ID attributes CLOSE_PI[d];
attributes : attribute*;
attribute: ID EQUALS[d] VALUE;

content : CONTENT;
